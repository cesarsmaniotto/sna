<?php

namespace sna\tests\model\facade{

    use PHPUnit_Framework_TestCase;
    use comunic\social_network_analyzer\model\facade\DatasetsFacade;
    use comunic\social_network_analyzer\model\repository\mongo\ProjectsRepository;
    use comunic\social_network_analyzer\model\repository\mongo\DatasetsRepository;
    use comunic\social_network_analyzer\model\entity\Dataset as DatasetModel;
    use comunic\social_network_analyzer\model\entity\format\json\JsonDatasetFormatter;
    use comunic\social_network_analyzer\model\entity\parse\json\JsonDatasetParser;

    use Zumba\PHPUnit\Extensions\Mongo\Client\Connector;
    use Zumba\PHPUnit\Extensions\Mongo\DataSet\DataSet;

    class DatasetsFacadeTest extends PHPUnit_Framework_TestCase{

        const DEFAULT_DATABASE = "development";

        protected $connection;
        protected $dataset;
        protected $fixture ;

        protected $facade;
        protected $projectRepo;
        protected $datasetRepo;


        public function getMongoConnection() {
            if (empty($this->connection)) {
                $this->connection = new Connector(new \MongoClient());
                $this->connection->setDb(static::DEFAULT_DATABASE);
            }
            return $this->connection;
        }
        public function getMongoDataSet() {
            if (empty($this->dataset)) {
                $this->dataset = new DataSet($this->getMongoConnection());
                $this->dataset->setFixture($this->fixture);
                $this->dataset->buildCollections();
            }
            return $this->dataset;
        }

        public function setUp(){
            $this->projectRepo = new ProjectsRepository(static::DEFAULT_DATABASE);
            $this->datasetRepo = new DatasetsRepository(static::DEFAULT_DATABASE);
            $this->facade = new DatasetsFacade($this->datasetRepo, $this->projectRepo);

            $this->fixture = array(
                "datasets" => array(
                    array(
                        "_id" => new \MongoId("54202c79d1c82dc01a000032"),
                        "name" => "FooDataset",
                        ),
                    array(
                        "_id" => new \MongoId("54202c79d1c82dc01a000033"),
                        "name" => "BarDataset",
                        )
                    ),

                "projects" => array(
                    array(
                        "_id" => new \MongoId("14202c79d1c82dc01a000032"),
                        "name" => "FooProject",
                        "datasetsIds" => array("54202c79d1c82dc01a000032","54202c79d1c82dc01a000033")
                        )
                    )

                );

            $this->getMongoConnection();
            $this->getMongoDataSet();
        }

        public function tearDown(){
            $this->dataset->dropAllCollections();
        }

        public function testInsert(){

            $project = $this->projectRepo->findById("14202c79d1c82dc01a000032");

            $datasetObj = new DatasetModel();
            $datasetObj->setName("aDataset");
            $datasetId = new \MongoId();
            $datasetObj->setId($datasetId->{'$id'});

            $this->datasetRepo->insert($datasetObj);
            $project->setDatasetsIds($project->getDatasetsIds[]=$datasetId->{'$id'});
            $this->projectRepo->update($project);


            $this->assertEquals($project->getDatasetsIds(), $this->projectRepo->findById("14202c79d1c82dc01a000032")->getDatasetsIds());
            $datasetObjResult = $this->datasetRepo->findById($datasetId->{'$id'});
            $this->assertEquals($datasetObj->getName(), $datasetObjResult->getName());
        }

         public function testUpdate(){

            $datasetAsText =  '{"name":"aDataset","id":"54202c79d1c82dc01a000032"}';

            $parser = new JsonDatasetParser();
            $this->facade->update($datasetAsText, $parser);

            $this->assertEquals($parser->parse($datasetAsText), $this->datasetRepo->findById("54202c79d1c82dc01a000032"));



        }

        public function testDelete(){

            $this->assertEquals(2, $this->connection->collection('datasets')->count());

            $this->assertEquals(2, \count($this->projectRepo->findById("14202c79d1c82dc01a000032")->getDatasetsIds()));

            $this->facade->delete("54202c79d1c82dc01a000032", "14202c79d1c82dc01a000032");

            $this->assertEquals(1, $this->connection->collection('datasets')->count());

            $this->assertEquals(1, \count($this->projectRepo->findById("14202c79d1c82dc01a000032")->getDatasetsIds()));

        }

        public function testListAll(){
            $datasets = $this->datasetRepo->listAll();

            $formatter = new JsonDatasetFormatter();

            $this->assertEquals($formatter->format($datasets), $this->facade->listAll($formatter));
        }

        public function testFindById(){
            $dataset = $this->datasetRepo->findById("54202c79d1c82dc01a000032");

            $formatter = new JsonDatasetFormatter();

            $this->assertEquals($formatter->format($dataset), $this->facade->findById("54202c79d1c82dc01a000032",$formatter));
        }


    }


}

?>